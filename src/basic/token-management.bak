import React, { useState, useEffect } from 'react'
import { AnchorProvider, BN } from '@coral-xyz/anchor'
import { useAnchorProvider } from '@/components/solana/use-anchor-provider'
import { useWallet } from '@solana/wallet-adapter-react'
import { PublicKey, SystemProgram, LAMPORTS_PER_SOL } from '@solana/web3.js'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { toast } from 'sonner'
import { 
  initializeTokenMint, 
  getSevenTokenProgramId, 
  getMintKeypair, 
  getSevenTokenProgram,
  findTokenConfigPDA,
  findReflectionTrackerPDA,
  SEVEN_TOKEN_PROGRAM_ID,
  SEVEN_TOKEN_MINT_ADDRESS
} from '../../token/seven-token/utils/token-exports'
import { mintInitialSupply } from '../../token/seven-token/utils/mint-tokens'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { TabsContent, TabsList, TabsTrigger, Tabs } from '@/components/ui/tabs'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { 
  AlertCircle, 
  CheckCircle2, 
  Coins, 
  Settings,
  RefreshCcw 
} from 'lucide-react'
import { ellipsify } from '@/lib/utils'
import { 
  TOKEN_PROGRAM_ID,
  getMint,
  getOrCreateAssociatedTokenAccount
} from '@solana/spl-token'

// Token constants
const DEFAULT_DECIMALS = 6
const TOTAL_SUPPLY_DEFAULT = new BN(1_000_000_000).mul(
  new BN(10).pow(new BN(DEFAULT_DECIMALS))
) // 1 billion tokens (fixed supply)

export function TokenManagement(): React.ReactElement {
  const provider = useAnchorProvider()
  const { publicKey, connected, signTransaction } = useWallet()
  // Using default cluster from context
  
  // Token data states
  const [tokenMint, setTokenMint] = useState<PublicKey | null>(null)
  const [tokenDecimals, setTokenDecimals] = useState(DEFAULT_DECIMALS)
  const [tokenSupply, setTokenSupply] = useState('')
  const [totalSupply, setTotalSupply] = useState(TOTAL_SUPPLY_DEFAULT.toString())
  const [mintInitialized, setMintInitialized] = useState(false)
  const [configInitialized, setConfigInitialized] = useState(false)
  const [excludedAddresses, setExcludedAddresses] = useState<string[]>([])
  const [rewardExcludedAddresses, setRewardExcludedAddresses] = useState<string[]>([])
  
  // UI states
  const [isLoading, setIsLoading] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [progressStep, setProgressStep] = useState(0)
  const [progressPercent, setProgressPercent] = useState(0)
  
  // Form inputs
  const [treasuryAddress, setTreasuryAddress] = useState('')
  const [excludeAddress, setExcludeAddress] = useState('')
  const [excludeRewardAddress, setExcludeRewardAddress] = useState('')
  
  // For last transaction status
  const [_, setLastTxId] = useState<string>('')  // Using underscore for unused variable
  
  // Authority status
  const [mintAuthority, setMintAuthority] = useState<string | null>(null)
  const [freezeAuthority, setFreezeAuthority] = useState<string | null>(null)
  
  // Check if user is admin
  useEffect(() => {
    setIsAdmin(
      publicKey?.toString() === 'GrDWUZZpCsxXR8qnZXREmE3bDgkQxLG6BHve3NLPbHFR' ||
      publicKey?.toString() === 'ALo5Qhjy46wVCXnD4osQXTq6ufF5MZ9uhxARAy7affLe' ||
      publicKey?.toString() === 'ACZfNEpJUufGH5MhpUAmoNkCRTpP2KkGhZXeNX1q9UXT' ||
      publicKey?.toString() === 'GhSwQL8opHBhE8PNog9ZGbuzTVdhPMEr5JJTHZQ9GRHq'
    )
  }, [publicKey])
  
  // Get program and PDAs once
  const mintAddress = new PublicKey(SEVEN_TOKEN_MINT_ADDRESS)
  const programId = SEVEN_TOKEN_PROGRAM_ID
  const [tokenConfigPDA] = findTokenConfigPDA(programId)
  const [reflectionTrackerPDA] = findReflectionTrackerPDA(programId)
  const program = provider ? getSevenTokenProgram(provider) : null
  
  // Initialize with mint from token exports
  useEffect(() => {
    if (!tokenMint) {
      setTokenMint(mintAddress)
    }
  }, [])
  
  // Only load token status once on initial mount
  useEffect(() => {
    if (provider && isAdmin) {
      // Initial load only when component mounts
      console.log('Initial token status check')
      loadTokenStatus()
    }
  }, []) // Empty dependency array - only run once on mount
  
  // Track last refresh time and count to prevent excessive refreshes
  const [lastRefreshTime, setLastRefreshTime] = useState(0)
  const [refreshCount, setRefreshCount] = useState(0)
  
  // Add a manual refresh function for the UI with debounce  // Refresh the token status manually
  const refreshTokenStatus = async () => {
    const now = Date.now();
    // Don't refresh if it's been less than 2 seconds since last refresh
    if (now - lastRefreshTime < 2000) {
      console.log('Skipping refresh, too soon since last refresh');
      return;
    }
    
    setLastRefreshTime(now);
    
    // Refresh token data
    if (provider && isAdmin) {
      console.log('Manual refresh requested');
      loadTokenStatus();
    }
  };
  
  // Function to check and display mint authority information
  const checkMintAuthority = async () => {
    if (!provider || !tokenMint) {
      toast.error("Token mint not initialized");
      return;
    }
    
    try {
      setIsLoading(true);
      
      // Get mint info
      const mintInfo = await getMint(
        provider.connection,
        new PublicKey(tokenMint)
      );
      
      // Update state with authority information
      const mintAuth = mintInfo.mintAuthority 
        ? mintInfo.mintAuthority.toBase58() 
        : 'Revoked';
      
      const freezeAuth = mintInfo.freezeAuthority 
        ? mintInfo.freezeAuthority.toBase58() 
        : 'None';
      
      setMintAuthority(mintAuth);
      setFreezeAuthority(freezeAuth);
      
      // Display mint authority info
      toast.success(`Mint Authority: ${mintAuth}`);
      console.log("Mint Authority:", mintAuth);
      console.log("Freeze Authority:", freezeAuth);
      
    } catch (error) {
      console.error("Error checking mint authority:", error);
      toast.error("Failed to check mint authority");
    } finally {
      setIsLoading(false);
    }
  };
  
  // Function to permanently revoke mint authority
  const revokeMintAuthority = async () => {
    if (!provider || !tokenMint || !publicKey || !signTransaction) {
      toast.error("Token mint not initialized or wallet not connected");
      return;
    }
    
    // Ask for confirmation before proceeding
    if (!confirm("WARNING: This will permanently revoke the ability to mint new tokens. This action CANNOT be undone. Are you sure you want to proceed?")) {
      toast.info("Mint authority revocation cancelled");
      return;
    }
    
    try {
      setIsLoading(true);
      toast.info("Revoking mint authority...");
      
      // Import needed functions from spl-token
      const { createSetAuthorityInstruction, AuthorityType, TOKEN_PROGRAM_ID } = await import('@solana/spl-token');
      const { Transaction } = await import('@solana/web3.js');
      
      const mintPubkey = new PublicKey(tokenMint);
      
      // Create the instruction to revoke mint authority
      const instruction = createSetAuthorityInstruction(
        mintPubkey,                // Mint account
        publicKey,                 // Current authority
        AuthorityType.MintTokens,  // Authority type
        null,                      // New authority (null = revoke)
        [],                        // Multi-sig signers (empty)
        TOKEN_PROGRAM_ID           // Token program ID
      );
      
      // Create and sign the transaction
      const transaction = new Transaction().add(instruction);
      transaction.feePayer = publicKey;
      
      const { blockhash } = await provider.connection.getLatestBlockhash();
      transaction.recentBlockhash = blockhash;
      
      // Sign and send the transaction
      const signedTx = await signTransaction(transaction);
      const signature = await provider.connection.sendRawTransaction(signedTx.serialize());
      
      // Wait for confirmation
      await provider.connection.confirmTransaction(signature, 'confirmed');
      
      toast.success("Mint authority has been permanently revoked!");
      console.log("Mint authority revoked, transaction:", signature);
      
      // Update the UI immediately
      setMintAuthority("Revoked");
      
      // Check mint authority to confirm
      setTimeout(() => checkMintAuthority(), 2000);
      
    } catch (error) {
      console.error("Error revoking mint authority:", error);
      toast.error(`Failed to revoke mint authority: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsLoading(false);
    }
  };
  
  // Function to mint the initial token supply to the connected wallet
  async function mintInitialTokenSupply() {
    try {
      setIsLoading(true)
      if (!provider || !publicKey || !tokenMint) {
        toast.error('Wallet not connected or token not initialized')
        return
      }
      
      // Use the total supply from the input or the default
      const supplyToMint = totalSupply || TOTAL_SUPPLY_DEFAULT
      
      // Mint the tokens to the connected wallet
      const tx = await mintInitialSupply(
        provider,
        { publicKey, signTransaction }, // wallet adapter
        tokenMint,
        publicKey, // destination wallet
        Number(supplyToMint) // amount to mint as number
      )
      
      console.log('Initial supply minted with tx:', tx)
      toast.success('Initial token supply minted successfully!')
      
      // Refresh the token status to show the updated supply
      refreshTokenStatus()
      setProgressStep(3)
      setProgressPercent(100)
    } catch (error: any) { // Type error as any for error handling
      console.error('Error minting initial supply:', error)
      toast.error(`Minting error: ${error?.message || 'Unknown error'}`)
    } finally {
      setIsLoading(false)
    }
  }
  
  // Function to check token status
  async function loadTokenStatus() {
    if (!provider || !tokenMint) return
    
    try {
      setIsLoading(true)
      
      console.log('Checking token status...')
      
      // Use local variables to avoid state sync issues
      let mintIsInitialized = false
      let configIsInitialized = false
      let decimalsValue = tokenDecimals
      let supplyValue = ''
      let excludedAddressesList: string[] = []

// New state variables for reward exclusion
const [rewardExcludedAddresses, setRewardExcludedAddresses] = useState<string[]>([])
const [excludeRewardAddress, setExcludeRewardAddress] = useState('')

// Function to exclude address from rewards
async function excludeFromRewards() {
  try {
    setIsLoading(true)
    
    if (!provider || !publicKey || !program || !configInitialized) {
      toast.error('Token must be fully initialized first')
      return
    }
    
    // Basic input validation
    if (!excludeRewardAddress.trim()) {
      toast.error('Address to exclude is required')
      return
    }
    
    let addressToExclude: PublicKey
    try {
      addressToExclude = new PublicKey(excludeRewardAddress)
    } catch (error) {
      toast.error('Invalid address')
      return
    }
    
    // Check if address is already excluded
    if (rewardExcludedAddresses.includes(addressToExclude.toString())) {
      toast.info('Address is already excluded from rewards')
      setExcludeRewardAddress('')
      return
    }
    
    // Exclude address from rewards
    console.log(`Excluding address ${addressToExclude.toString()} from rewards...`)
    
    const tx = await program.methods
      .excludeFromRewards(addressToExclude)
      .accounts({
        authority: publicKey,
        tokenConfig: tokenConfigPDA,
      } as any)
      .rpc()
    
    console.log('Address excluded from rewards with tx:', tx)
    toast.success('Address excluded from rewards successfully!')
    
    // Add to local list
    setRewardExcludedAddresses([...rewardExcludedAddresses, addressToExclude.toString()])
    
    // Clear input
    setExcludeRewardAddress('')
    
    // Store last transaction ID for reference
    setLastTxId(tx)
    
    // Manually refresh token status
    refreshTokenStatus()
  } catch (error) {
    console.error('Error excluding address from rewards:', error)
    toast.error(`Failed to exclude from rewards: ${error instanceof Error ? error.message : 'Unknown error'}`)
  } finally {
    setIsLoading(false)
  }
}

// ... (rest of the code remains the same)

// Render main token management UI for admins
return (
  <Card className="max-w-5xl mx-auto">
    <CardHeader>
      <CardTitle className="flex items-center gap-2">
        <Coins className="h-5 w-5" /> $7F Token Management
      </CardTitle>
      <CardDescription>
        Initialize, mint, and manage the $7F token on the Solana blockchain
      </CardDescription>
    </CardHeader>
    <CardContent>
      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="initialize">Initialize</TabsTrigger>
          <TabsTrigger value="exclude">Fee & Reward Exclusions</TabsTrigger>
        </TabsList>
        
        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-4 mt-4">
          {/* ... (rest of the code remains the same) */}
        </TabsContent>
        
        {/* Fee & Reward Exclusions Tab */}
        <TabsContent value="exclude" className="space-y-4 mt-4">
          <div className="grid grid-cols-1 gap-6">
            {/* Fee Exclusion Card */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Fee Exclusion Management</CardTitle>
                <CardDescription>
                  Manage addresses that are excluded from paying transaction fees
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                        variant="outline"
                        className="w-full"
                        disabled={isLoading}
                      >
                        <RefreshCcw className="h-4 w-4 mr-2" />
                        Refresh Excluded Addresses
                      </Button>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* Initialize Tab */}
          <TabsContent value="initialize" className="space-y-4 mt-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Token Initialization</CardTitle>
                <CardDescription>
                  Complete the following steps to initialize the $7F token on the blockchain
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="treasuryAddress">Treasury Address</Label>
                  <Input
                    id="treasuryAddress"
                    placeholder="Enter treasury Solana address"
                    value={treasuryAddress}
                    onChange={(e) => setTreasuryAddress(e.target.value)}
                    disabled={isLoading || configInitialized}
                  />
                  <p className="text-sm text-muted-foreground">
                    The treasury address will receive transaction fees
                  </p>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="totalSupply">Total Supply</Label>
                  <Input
                    id="totalSupply"
                    placeholder="Enter total supply"
                    value={totalSupply}
                    onChange={(e) => setTotalSupply(e.target.value)}
                    disabled={isLoading || configInitialized}
                  />
                  <p className="text-sm text-muted-foreground">
                    Default is 7,000,000 tokens
                  </p>
                </div>
                
                <div className="flex flex-col gap-2">
                  <Button
                    onClick={initializeTokenMintStep}
                    disabled={isLoading || !isAdmin || !connected || mintInitialized}
                    className="w-full relative"
                  >
                    {isLoading ? (
                      <span className="flex items-center justify-center">
                        <span className="animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full"></span>
                        Initializing Mint...
                      </span>
                    ) : mintInitialized ? (
                      <span className="flex items-center justify-center">
                        <CheckCircle2 className="h-4 w-4 mr-2 text-green-500" />
                        Token Mint Initialized
                      </span>
                    ) : (
                      'Step 1: Initialize Token Mint'
                    )}
                  </Button>
                  
                  <Button
                    onClick={initializeTokenConfigStep}
                    disabled={isLoading || !mintInitialized || configInitialized || !treasuryAddress}
                    className="w-full relative"
                  >
                    {isLoading ? (
                      <span className="flex items-center justify-center">
                        <span className="animate-spin mr-2 h-4 w-4 border-2 border-current border-t-transparent rounded-full"></span>
                        Initializing Config...
                      </span>
                    ) : configInitialized ? (
                      <span className="flex items-center justify-center">
                        <CheckCircle2 className="h-4 w-4 mr-2 text-green-500" />
                        Token Config Initialized
                      </span>
                    ) : (
                      'Step 2: Initialize Token Config'
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

        </Tabs>
      </CardContent>
    </Card>
  )
}
